---
import ChevronDown from "../icons/ChevronDown.astro";
const { currentLang, type } = Astro.props;
const path = Astro.url.pathname;
const pathMapperEn: Record<string, string> = {
  "/about": "/ueber-uns",
  "/careers": "/karriere",
};
const pathMapperDe: Record<string, string> = {
  "/ueber-uns": "/about",
  "/karriere": "/careers",
};
---

<!-- Language Picker -->
<div class="relative mr-0" id="language-container">
  <button
    class="flex cursor-pointer hover:*:text-primary-1a items-center text-white hover:text-gray-200 space-x-1 px-2 py-1 rounded-md transition-colors"
    id="language-toggle"
  >
    <span class="text-sm font-medium">{currentLang.toUpperCase()}</span>
    <ChevronDown
      classes="w-4 h-4 transform transition-transform duration-300 ease-in-out"
    />
  </button>
  <div class="absolute right-0 top-full hidden w-32" id="language-menu">
    <div class="h-2 -mt-2"></div>
    <div
      class:list={[
        "backdrop-blur-xl submenu rounded-lg shadow-lg py-2 border border-white/10",
        type === "black" ? "bg-black/80" : "bg-black/80",
      ]}
    >
      <a
        href={
          import.meta.env.PUBLIC_SITE_URL_EN +
          (pathMapperDe[path] || path)
        }
        class="w-full text-left px-4 py-2 text-white hover:bg-white/10 flex items-center space-x-2 transition-colors"
        data-lang="en"
      >
        <span class="w-6">ðŸ‡¬ðŸ‡§</span>
        <span>English</span>
      </a>
      <a
        href={
          import.meta.env.PUBLIC_SITE_URL_DE +
          (pathMapperEn[path] || path)
        }
        class="w-full text-left px-4 py-2 text-white hover:bg-white/10 flex items-center space-x-2 transition-colors"
        data-lang="de"
      >
        <span class="w-6">ðŸ‡©ðŸ‡ª</span>
        <span>Deutsch</span>
      </a>
    </div>
  </div>
</div>

<script>
  // Language picker functionality
  const languageToggle = document.getElementById("language-toggle");
  const languageContainer = document.getElementById("language-container");
  const languageMenu = document.getElementById("language-menu");
  const languageButtons = document.querySelectorAll("[data-lang]");

  // Language picker handlers
  languageToggle?.addEventListener("click", (e) => {
    e.stopPropagation();
    const chevron = languageToggle.querySelector("svg");
    chevron?.classList.toggle("rotate-180");
    languageMenu?.classList.toggle("hidden");
  });

  // Close dropdowns on click outside
  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;

    // Close language menu
    if (!languageContainer?.contains(target)) {
      const chevron = languageToggle?.querySelector("svg");
      chevron?.classList.remove("rotate-180");
      languageMenu?.classList.add("hidden");
    }
  });
</script>

<style>
  /* Language menu animation */
  #language-menu {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
  }

  #language-menu:not(.hidden) {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
</style>

<script>
  // Add backdrop blur to header on scroll
  const header = document.getElementById("site-header");
  window.addEventListener("scroll", () => {
    if (window.scrollY > 50) {
      Array.from(header?.getElementsByClassName("submenu") || []).forEach(
        (submenu) => {
          submenu.classList.add("bg-black/60");
          submenu.classList.remove("bg-black/20");
        }
      );
    } else {
      Array.from(header?.getElementsByClassName("submenu") || []).forEach(
        (submenu) => {
          submenu.classList.remove("bg-black/60");
          submenu.classList.add("bg-black/20");
        }
      );
    }
  });
</script>
