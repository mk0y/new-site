---
interface Props {
  title: string;
  submitText: string;
  fullNameLabel: string;
  emailLabel: string;
  companyLabel: string;
  phoneLabel: string;
  messageLabel: string;
}

const {
  title,
  submitText,
  fullNameLabel,
  emailLabel,
  companyLabel,
  phoneLabel,
  messageLabel,
} = Astro.props;
---

<div
  class="max-w-[600px] mx-auto my-16 p-8 bg-[var(--gray-c)] rounded-lg border border-[var(--gray-b)] md:my-8 md:p-6"
>
  <h2 class="text-[var(--white)] text-center mb-8 text-4xl">{title}</h2>

  <form
    name="contact"
    method="POST"
    data-netlify="true"
    class="flex flex-col gap-6"
  >
    <div class="flex flex-col gap-2">
      <label for="fullName" class="text-gray-a text-sm font-medium">
        {fullNameLabel}
      </label>
      <input
        type="text"
        id="fullName"
        name="fullName"
        required
        class="p-3 border border-gray-b rounded bg-white text-gray-a text-base transition-all duration-300 ease-in-out hover:border-white-borders focus:outline-none focus:border-primary-1a focus:ring-2 focus:ring-primary-1a focus:ring-opacity-20"
      />
    </div>

    <div class="flex flex-col gap-2">
      <label for="email" class="text-gray-a text-sm font-medium"
        >{emailLabel}</label
      >
      <input
        type="email"
        id="email"
        name="email"
        required
        class="p-3 border border-gray-b rounded bg-white text-gray-a text-base transition-all duration-300 ease-in-out hover:border-white-borders focus:outline-none focus:border-primary-1a focus:ring-2 focus:ring-primary-1a focus:ring-opacity-20"
      />
    </div>

    <div class="flex flex-col gap-2">
      <label for="company" class="text-gray-a text-sm font-medium"
        >{companyLabel}</label
      >
      <input
        type="text"
        id="company"
        name="company"
        required
        class="p-3 border border-gray-b rounded bg-white text-gray-a text-base transition-all duration-300 ease-in-out hover:border-white-borders focus:outline-none focus:border-primary-1a focus:ring-2 focus:ring-primary-1a focus:ring-opacity-20"
      />
    </div>

    <div class="flex flex-col gap-2">
      <label for="phone" class="text-gray-a text-sm font-medium"
        >{phoneLabel}</label
      >
      <input
        type="tel"
        id="phone"
        name="phone"
        class="p-3 border border-gray-b rounded bg-white text-gray-a text-base transition-all duration-300 ease-in-out hover:border-white-borders focus:outline-none focus:border-primary-1a focus:ring-2 focus:ring-primary-1a focus:ring-opacity-20"
      />
    </div>

    <div class="flex flex-col gap-2">
      <label for="message" class="text-gray-a text-sm font-medium"
        >{messageLabel}</label
      >
      <textarea
        id="message"
        name="message"
        rows="5"
        required
        class="p-3 border border-gray-b rounded bg-white text-gray-a text-base transition-all duration-300 ease-in-out hover:border-white-borders focus:outline-none focus:border-primary-1a focus:ring-2 focus:ring-primary-1a focus:ring-opacity-20 resize-y min-h-[120px]"
      ></textarea>
    </div>

    <button
      type="submit"
      class="w-full mt-4 px-8 py-4 bg-primary-1a text-gray-c rounded font-semibold text-base cursor-pointer transition-all duration-300 ease-in-out shadow-sm hover:bg-primary-1b hover:-translate-y-0.5 hover:shadow-md active:translate-y-0 active:shadow-sm"
    >
      {submitText}
    </button>
  </form>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const handleSubmit = (event: Event) => {
      event.preventDefault();

      const myForm = event.target;
      if (myForm instanceof HTMLFormElement) {
        const formData = new FormData(myForm);
        const searchParams = new URLSearchParams();
        for (const [key, value] of formData) {
          searchParams.append(key, value.toString());
        }

        fetch("/", {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: searchParams.toString(),
        })
          .then(() => console.log("Form successfully submitted"))
          .catch((error) => alert(error));
      }

      document.querySelector("form")?.addEventListener("submit", handleSubmit);
    };
  });
</script>
