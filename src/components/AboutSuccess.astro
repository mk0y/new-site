---
interface Props {
  subtitle: string;
  title: string;
  description: string;
  learnMoreText: string;
  contactText: string;
  metrics: {
    value: number;
    label: string;
  }[];
}

const { subtitle, title, description, learnMoreText, contactText, metrics } =
  Astro.props;
---

<section class="relative py-32 bg-black">
  <!-- Background image with overlay -->
  <div class="absolute inset-0 bg-black/50 mix-blend-multiply"></div>
  <!-- <div
    class="absolute inset-0 bg-cover bg-center bg-no-repeat"
    style="background-image: url('/images/bg-success.jpg');"
  >
  </div> -->

  <div class="relative container mx-auto px-4">
    <div class="w-full mb-16">
      <p class="text-lg text-primary-1a mb-4">{subtitle}</p>
      <div class="flex w-full gap-4">
        <h2 class="text-4xl flex-1 md:text-5xl font-bold text-white mb-6">
          {title}
        </h2>
        <p class="text-lg text-white-text flex-1">
          {description}
        </p>
      </div>
    </div>

    <!-- Metrics -->
    <div class="grid md:grid-cols-3 gap-12 mb-12">
      {
        metrics.map((metric) => (
          <div class="text-center" x-data="counter">
            <p class="text-6xl md:text-7xl font-bold text-white mb-4">
              <span
                x-ref="counter"
                x-text="formatted"
                data-value={metric.value}
                data-suffix={metric.value === 50 ? "%" : "+"}
              >
                0
              </span>
            </p>
            <p class="text-xl text-white-text">{metric.label}</p>
          </div>
        ))
      }
    </div>

    <div class="flex flex-wrap justify-center mt-6 pt-12 gap-4">
      <a
        href="/contact"
        class="inline-flex items-center text-lg font-medium text-white hover:text-primary-1a transition-colors group"
      >
        {contactText}
        <svg
          class="w-4 h-4 ml-2 transform transition-transform group-hover:translate-x-1"
          viewBox="0 0 16 16"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M6 12L10 8L6 4"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </a>
    </div>
  </div>
</section>

<script>
  import Alpine from "alpinejs";

  function easeOutQuad(t: number): number {
    return t * (2 - t);
  }

  interface CounterComponent {
    count: number;
    $refs: {
      counter: HTMLElement;
    };
    $el: HTMLElement;
    formatted: string;
    init(): void;
  }

  Alpine.data(
    "counter",
    () =>
      ({
        count: 0,
        get formatted(): string {
          const suffix =
            (this.$refs.counter as HTMLElement).dataset.suffix || "";
          return this.count.toString() + suffix;
        },
        init() {
          const target = parseInt(
            (this.$refs.counter as HTMLElement).dataset.value || "0"
          );
          const duration = 2500; // 2.5 seconds
          const steps = 60; // More steps for smoother animation
          const stepTime = duration / steps;
          let startTime: number | null = null;

          const observer = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  const animate = (currentTime: number) => {
                    if (!startTime) startTime = currentTime;
                    const progress = Math.min(
                      (currentTime - startTime) / duration,
                      1
                    );
                    const easedProgress = easeOutQuad(progress);

                    this.count = Math.floor(target * easedProgress);

                    if (progress < 1) {
                      requestAnimationFrame(animate);
                    } else {
                      this.count = target;
                    }
                  };

                  requestAnimationFrame(animate);
                  observer.unobserve(entry.target);
                }
              });
            },
            {
              threshold: 0.2,
            }
          );

          observer.observe(this.$el);
        },
      }) as CounterComponent
  );

  // Alpine.start();
</script>
